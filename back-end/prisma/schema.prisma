generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

enum Role {
    User
    Admin
}

enum Gender {
    select_gender
    male
    female
    other
}

model User {
    id                  Int                   @id @default(autoincrement())
    role                Role                  @default(User)
    firstname           String                @map("first_name")
    lastname            String                @map("last_name")
    gender              Gender?               @default(other)
    email               String
    phone               String                @db.VarChar(10)
    address             String?               @db.VarChar(255)
    username            String                @unique @db.VarChar(30)
    password            String                @db.VarChar(72)
    profile             String?
    orders              Order[]
    shippingAddress ShippingAddress[]
    cart                Cart[]
    Review              Review[]
}

model Order {
    id                    Int                  @id @default(autoincrement())
    order_date            DateTime             @default(now())
    total_amount          Int                  @default(0)
    user                  User                 @relation(fields: [userId], references: [id])
    userId                Int                  @map("user_id")
    shippingAddress   ShippingAddress? @relation(fields: [shippingAddressId], references: [id])
    shippingAddressId Int
    orderItems            OrderItems[]
    Payments              Payments?
}

model OrderItems {
    id       Int   @id @default(autoincrement())
    quantity Int?  @default(0)
    subtotal Int   @default(0)
    order    Order @relation(fields: [orderId], references: [id])
    orderId  Int
    book     Book  @relation(fields: [bookId], references: [id])
    bookId   Int
}

model Cart {
    id            Int  @id @default(autoincrement())
    cart_quantity Int?
    user          User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId        Int  @map("user_id")
    book          Book @relation(fields: [bookId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    bookId        Int  @map("book_id")
}

model Genres {
    id         Int    @id @default(autoincrement())
    genre_name String
    book       Book[]
}

model Book {
    id             Int          @id @default(autoincrement())
    title          String?      @map("title")
    author         String?
    description    String?      @db.VarChar(255)
    price          Int?
    stock_quantity Int?         @default(0)
    bookimg        String?
    date_created   DateTime     @default(now())
    orderItems     OrderItems[]
    cart           Cart[]
    genres         Genres       @relation(fields: [genreId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    genreId        Int
    Review         Review[]
    Promote        Promote[]
}

enum Payment_Method {
    Pay_on_delivery
    Bank
    QR_CODE
}

model Payments {
    id             Int            @id @default(autoincrement())
    paymentdate    DateTime       @default(now()) @map("payment_date")
    payment_method Payment_Method @map("payment_method")
    amount         Int?
    payment_img    String?
    order          Order          @relation(fields: [orderId], references: [id])
    orderId        Int            @unique @map("order_id")
}

model ShippingAddress {
    id               Int             @id @default(autoincrement())
    recipient_fname  String?
    recipient_lname  String?
    shipping_address String?         @db.VarChar(255)
    district         String?
    prefecture       String?
    province         String?
    zip_code         String?
    phone            String?
    user             User            @relation(fields: [userId], references: [id])
    userId           Int             @map("user_id")
    Order Order[]
}

model Review {
    id          Int      @id @default(autoincrement())
    review_text String   @db.VarChar(255)
    rating      Int      @default(0)
    like        Int      @default(0)
    respond     String?  @db.VarChar(255)
    review_date DateTime @db.Date
    img_url     String
    user        User     @relation(fields: [userId], references: [id])
    userId      Int      @map("user_id")
    book        Book     @relation(fields: [bookId], references: [id])
    bookId      Int      @map("book_id")
}

model Promote {
    id           Int    @id @default(autoincrement())
    promote_name String @map("promote_name")
    promote_img  String
    bookId       Int    @map("book_id")
    book         Book   @relation(fields: [bookId], references: [id])
}
